{"version":3,"sources":["app.js","main.js","components/weather.js","datasource/datasource.js","datasource/map.js","datasource/weather.js"],"names":["requirejs","config","baseUrl","paths","app","main","init","define","Weather","WeatherDatasource","MapDatasource","console","log","clima","document","querySelector","weatherSource","units","mapSource","this","_classCallCheck","loadingSecton","currentClimaBlockSection","loadingElement","createLoadingElement","requestInProgress","latitude","longitude","city","temperature","addEventListeners","loadClima","_createClass","key","value","_this","addEventListener","refreshClima","_this2","showLoading","getLocation","then","position","crd","coords","getCity","getForecast","populateClima","currently","climaBlockSection","determineClimaBlock","unitSymbol","toUpperCase","climaBlock","render","temp","appendChild","classList","add","removeLoading","removeChild","clearClima","firstChild","remove","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","error","err","code","message","convertToFahrenheit","C","Datasource","options","obj","params","_typeof","Object","keys","map","encodeURIComponent","join","url","xhr","XMLHttpRequest","open","method","onload","status","response","statusText","onerror","send","_Datasource","Map","_possibleConstructorReturn","__proto__","getPrototypeOf","call","_inherits","lat","long","fetch","jsonResponse","JSON","parse","i","cityName","adressComponents","results","address_components","adressComponentsLength","length","component","types","short_name","templates","temperatureTemplate","loadingTemplate","FORECAST_URL","window","callbackJSON","forecast","body","dummyScript","createElement","src","cloneNode","item","div","textContent","Math","round"],"mappings":"27CAKAA,UAAUC,QACNC,QAAS,iBACTC,OACIC,IAAK,aAMbJ,WAAW,QAAS,SAASK,GACzBA,EAAKC,SCfTC,OAAO,QACH,qBACA,qBACA,kBACD,SACCC,EACAC,EACAC,GAIA,OACIJ,KAAM,WACFK,QAAQC,IAAI,kBACZ,IAAMC,GAAQC,SAASC,cAAc,aAC/BC,EAAgB,GAAIP,IACtBQ,MAAO,MAELC,EAAY,GAAIR,EAElBG,KACAM,KAAKN,MAAQ,GAAIL,GAAQK,EAAOG,EAAeE,2QCrB/DX,QAAO,wBACJ,WAwJC,MAxJU,YAKN,QAAAC,GAAYK,EAAOG,EAAeE,GAAWE,gBAAAD,KAAAX,GACzCW,KAAKN,MAAQA,EACbM,KAAKH,cAAgBA,EACrBG,KAAKD,UAAYA,EAEjBC,KAAKE,cAAgBP,SAASC,cAAc,eAC5CI,KAAKG,yBAA2B,KAEhCH,KAAKI,eAAiBJ,KAAKH,cAAcQ,uBAEzCL,KAAKM,mBAAoB,EACzBN,KAAKO,SAAW,KAChBP,KAAKQ,UAAY,KAEjBR,KAAKS,KAAO,KACZT,KAAKU,YAAc,KAEnBV,KAAKW,oBAELX,KAAKY,YAxBH,MAAAC,cAAAxB,IAAAyB,IAAA,oBAAAC,MAAA,WA2Bc,GAAAC,GAAAhB,IAChBL,UAASC,cAAc,eAAeqB,iBAAiB,QAAS,WAAA,MAAMD,GAAKE,oBA5BzEJ,IAAA,YAAAC,MAAA,WA+BM,GAAAI,GAAAnB,IAERA,MAAKM,mBAAoB,EAEzBN,KAAKoB,cAELpB,KAAKqB,cACAC,KAAK,SAACC,GACH,GAAMC,GAAMD,EAASE,MAKrB,OAHAN,GAAKZ,SAAWiB,EAAIjB,SACpBY,EAAKX,UAAYgB,EAAIhB,UAEdW,EAAKpB,UAAU2B,QAAQP,EAAKZ,SAAUY,EAAKX,aAErDc,KAAK,SAACb,GAGH,MAFAU,GAAKV,KAAOA,EAELU,EAAKtB,cAAc8B,YAAYR,EAAKZ,SAAUY,EAAKX,aAE7Dc,KAAK,SAAC5B,GAAD,MAAWyB,GAAKS,cAAclC,QAnDtCoB,IAAA,gBAAAC,MAAA,SAsDQrB,GACV,GAAMgB,GAAchB,EAAMmC,UAAUnB,YAEhCoB,EAAoB9B,KAAK+B,oBAAoBrB,EAAaV,KAAKH,cAAcmC,WAAWC,cAC5FjC,MAAKG,yBAA2BH,KAAKN,MAAME,cAAckC,EAEzD,IAAMI,GAAalC,KAAKH,cAAcsC,QAClC1B,KAAMT,KAAKS,KACX2B,KAAM1B,GAEVV,MAAKG,yBAAyBkC,YAAYH,GAC1ClC,KAAKG,yBAAyBmC,UAAUC,IAAI,8BAE5CvC,KAAKwC,gBAELxC,KAAKM,mBAAoB,KArEvBQ,IAAA,cAAAC,MAAA,WAyEFf,KAAKE,cAAcmC,YAAYrC,KAAKI,mBAzElCU,IAAA,gBAAAC,MAAA,WA6EFf,KAAKE,cAAcuC,YAAYzC,KAAKI,mBA7ElCU,IAAA,eAAAC,MAAA,WAiFFf,KAAK0C,aAEL1C,KAAKY,eAnFHE,IAAA,aAAAC,MAAA,WAuFFf,KAAKG,yBAAyBsC,YAAYzC,KAAKG,yBAAyBwC,YACxE3C,KAAKG,yBAAyBmC,UAAUM,OAAO,iCAxF7C9B,IAAA,cAAAC,MAAA,WA+FF,MAAO,IAAI8B,SAAQ,SAACC,EAASC,GACzBC,UAAUC,YAAYC,mBAAmB,SAAC3B,GAAD,MAAcuB,GAAQvB,IAAW,SAAC4B,GAAD,MAAWJ,GAAOI,UAhG9FrC,IAAA,kBAAAC,MAAA,SAoGUoC,GACZ3D,QAAQC,IAAR,SAAqB2D,IAAIC,KAAzB,MAAmCD,IAAIE,SACvCtD,KAAKM,mBAAoB,KAtGvBQ,IAAA,sBAAAC,MAAA,SAyGcqB,EAAMtC,GACtB,GAAIoC,GAAa,kBAsCjB,OApCc,MAAVpC,IACAsC,EAAOpC,KAAKuD,oBAAoBnB,IAGhCA,EAAO,IACPF,EAAa,iBACNE,EAAO,KAAOA,GAAQ,IAC7BF,EAAa,iBACNE,EAAO,IAAMA,GAAQ,IAC5BF,EAAa,iBACNE,EAAO,IAAMA,GAAQ,GAC5BF,EAAa,iBACNE,EAAO,IAAMA,GAAQ,GAC5BF,EAAa,iBACNE,EAAO,IAAMA,GAAQ,GAC5BF,EAAa,iBACNE,EAAO,IAAMA,GAAQ,GAC5BF,EAAa,iBACNE,GAAQ,IAAMA,GAAQ,GAC7BF,EAAa,mBACNE,GAAQ,IAAMA,EAAO,GAC5BF,EAAa,kBACNE,GAAQ,IAAMA,EAAO,GAC5BF,EAAa,kBACNE,GAAQ,IAAMA,EAAO,GAC5BF,EAAa,kBACNE,GAAQ,IAAMA,EAAO,GAC5BF,EAAa,kBACNE,GAAQ,IAAMA,EAAO,GAC5BF,EAAa,kBACNE,GAAQ,IAAMA,EAAO,GAC5BF,EAAa,kBACNE,EAAO,KACdF,EAAa,mBAGjB,IAAWA,KAhJTpB,IAAA,sBAAAC,MAAA,SAmJcyC,GAChB,MAAQ,KAAOA,EAAI,OApJjBnE,4dCDdD,QAAO,2BACJ,WAgDC,MAhDU,YAKN,QAAAqE,GAAYC,GAASzD,gBAAAD,KAAAyD,GALf,MAAA5C,cAAA4C,IAAA3C,IAAA,QAAAC,MAAA,SAUA4C,GACF,MAAO,IAAId,SAAQ,SAACC,EAASC,GAEzB,GAAIa,GAASD,EAAIC,MACbA,IAA4B,gBAAlB,KAAOA,EAAP,YAAAC,QAAOD,MACjBA,EAASE,OAAOC,KAAKH,GAAQI,IAAI,SAAClD,GAC9B,MAAOmD,oBAAmBnD,GAAO,IAAMmD,mBAAmBL,EAAO9C,MAClEoD,KAAK,KAGZ,IAAMC,GAAMP,EAASD,EAAIQ,IAAM,IAAMP,EAASD,EAAIQ,IAE9CC,EAAM,GAAIC,eACdD,GAAIE,KAAKX,EAAIY,QAAU,MAAOJ,GAE9BC,EAAII,OAAS,WACLJ,EAAIK,QAAU,KAAOL,EAAIK,OAAS,IAClC3B,EAAQsB,EAAIM,UAEZ3B,EAAOqB,EAAIO,aAInBP,EAAIQ,QAAU,WACV7B,EAAOqB,EAAIO,aASfP,EAAIS,aA3CNpB,0QCDdrE,QAAO,kBACH,yBACD,SACCqE,GAwCA,MAvCF,UAAAqB,GAQM,QAAAC,GAAYrB,GAAS,MAAAzD,iBAAAD,KAAA+E,GAAAC,2BAAAhF,MAAA+E,EAAAE,WAAAnB,OAAAoB,eAAAH,IAAAI,KAAAnF,OAR3B,MAAAoF,WAAAL,EAAAD,GAAAjE,aAAAkE,IAAAjE,IAAA,UAAAC,MAAA,SAYcsE,EAAKC,GACT,GAAI5B,IACAa,OAAQ,MACRJ,IAZK,4DAYckB,EAAnB,IAA0BC,EAG9B,OAAOtF,MAAKuF,MAAM7B,GAASpC,KAAK,SAACoD,GAC7B,GAAIc,GAAeC,KAAKC,MAAMhB,GAC1BiB,MAAAA,GACAC,MAAAA,GACEC,EAAmBL,EAAaM,QAAQ,GAAGC,mBAC3CC,EAAyBH,EAAiBI,MAEhD,KAAKN,EAAI,EAAGA,EAAIK,EAAwBL,GAAK,EAAG,CAC5C,GAAMO,GAAYL,EAAiBF,EAEnC,IAA2B,aAAvBO,EAAUC,MAAM,GAAmB,CACnCP,EAAWM,EAAUE,UACrB,QAIR,MAAOR,SAlCrBb,GAMoBtB,wQCVtBrE,QAAO,sBACH,yBACD,SACCqE,GA0FA,MAzFF,UAAAqB,GAaM,QAAAzF,GAAYqE,GAASzD,gBAAAD,KAAAX,EAAA,IAAA2B,GAAAgE,2BAAAhF,MAAAX,EAAA4F,WAAAnB,OAAAoB,eAAA7F,IAAA8F,KAAAnF,MAAA,OAEjBgB,GAAKqF,UAAY1G,SAASC,cAAc,iBACxCoB,EAAKsF,oBAAsBtF,EAAKqF,UAAUzG,cAAc,8BACxDoB,EAAKuF,gBAAkBvF,EAAKqF,UAAUzG,cAAc,qCAEpDoB,EAAKqF,UAAU5D,YAAYzB,EAAKuF,iBAEhCvF,EAAKgB,WAAa0B,EAAQ5D,OAAS,IACnCkB,EAAKlB,MAbM,MAaEkB,EAAKgB,WAAWC,cAA+B,WAAa,SATxDjB,EAb3B,MAAAoE,WAAA/F,EAAAyF,GAAAjE,aAAAxB,IAAAyB,IAAA,aAAAC,MAAA,SAyBiBsE,EAAKC,GACZ,GAAI5B,IACAa,OAAQ,MACRJ,IAAAA,6EAAgCkB,EAAhC,QAA2CC,EAA3C,UAAyDtF,KAAKF,MAA9D,0CAGJ,OAAOE,MAAKuF,MAAM7B,GAASpC,KAAK,SAACoD,GAG7B,MAFmBe,MAAKC,MAAMhB,QAhC5C5D,IAAA,cAAAC,MAAA,SAsCkBsE,EAAKC,GAAM,GAAAnE,GAAAnB,KACf0D,GACAa,OAAQ,MACRJ,IAAQqC,qEAAoCnB,EAA5C,IAAmDC,EAGvD,OAAO,IAAIzC,SAAQ,SAACC,EAASC,GAGzB0D,OAAOC,aAAe,SAACC,SAEZF,QAAOC,aACd/G,SAASiH,KAAKnE,YAAYtB,EAAK0F,aAC/B1F,EAAK0F,YAAc,KAGnB/D,EAAQ6D,IAIZxF,EAAK0F,YAAclH,SAASmH,cAAc,UAC1C3F,EAAK0F,YAAYE,IAASrD,EAAQS,IAAlC,yBAGAhD,EAAK0F,YAAYjC,QAAU7B,EAG3BpD,SAASiH,KAAKvE,YAAYlB,EAAK0F,kBAjE7C/F,IAAA,uBAAAC,MAAA,WAyEU,MAAOf,MAAKuG,gBAAgBS,WAAU,MAzEhDlG,IAAA,SAAAC,MAAA,SA+EakG,EAAMC,GAMT,MALAA,GAAMA,GAAOlH,KAAKsG,oBAAoBU,WAAU,GAEhDE,EAAItH,cAAc,gBAAgBuH,YAAcF,EAAKxG,KACrDyG,EAAItH,cAAc,oBAAoBuH,YAAtC,GAAuDC,KAAKC,MAAMJ,EAAK7E,MAEhE8E,MArFjB7H,GAWwBoE","file":"main.min.js","sourcesContent":["// For any third party dependencies, like jQuery, place them in the lib folder.\n\n// Configure loading modules from the lib directory,\n// except for 'app' ones, which are in a sibling\n// directory.\nrequirejs.config({\n    baseUrl: 'src/javascript',\n    paths: {\n        app: '../dist'\n    }\n});\n\n// Start loading the main app file. Put all of\n// your application logic in there.\nrequirejs(['main'], function(main) {\n    main.init();\n});","define('main', [\n    'components/weather',\n    'datasource/weather',\n    'datasource/map'\n], function(\n    Weather,\n    WeatherDatasource,\n    MapDatasource\n) {\n    'use strict';\n    \n    return {\n        init: function() {\n            console.log('Initiated Clima');\n            const clima = document.querySelector('#js-clima');\n            const weatherSource = new WeatherDatasource({\n                units: 'f' \n            });\n            const mapSource = new MapDatasource();\n\n            if (clima) {\n                this.clima = new Weather(clima, weatherSource, mapSource);\n            }\n        }\n    };\n});","define('components/weather',[\n], function() {\n    'use strict';\n\n    class Weather {\n\n        constructor(clima, weatherSource, mapSource) {\n            this.clima = clima;\n            this.weatherSource = weatherSource;\n            this.mapSource = mapSource;\n\n            this.loadingSecton = document.querySelector('#js-loading');\n            this.currentClimaBlockSection = null;\n\n            this.loadingElement = this.weatherSource.createLoadingElement();\n\n            this.requestInProgress = false;\n            this.latitude = null;\n            this.longitude = null;\n\n            this.city = null;\n            this.temperature = null;\n\n            this.addEventListeners();\n\n            this.loadClima();\n        }\n\n        addEventListeners() {\n            document.querySelector('#js-refresh').addEventListener('click', () => this.refreshClima());\n        }\n\n        loadClima() {\n\n            this.requestInProgress = true;\n\n            this.showLoading();\n\n            this.getLocation()\n                .then((position) => {\n                    const crd = position.coords;\n\n                    this.latitude = crd.latitude;\n                    this.longitude = crd.longitude;\n\n                    return this.mapSource.getCity(this.latitude, this.longitude);\n                })\n                .then((city) => {\n                    this.city = city;\n                    // return this.weatherSource.getWeather(this.latitude, this.longitude);\n                    return this.weatherSource.getForecast(this.latitude, this.longitude);\n                })\n                .then((clima) => this.populateClima(clima));\n        }\n\n        populateClima(clima) {\n            const temperature = clima.currently.temperature; // clima.main.temp for openweather API\n\n            let climaBlockSection = this.determineClimaBlock(temperature, this.weatherSource.unitSymbol.toUpperCase());\n            this.currentClimaBlockSection = this.clima.querySelector(climaBlockSection);\n\n            const climaBlock = this.weatherSource.render({\n                city: this.city,\n                temp: temperature\n            });\n            this.currentClimaBlockSection.appendChild(climaBlock);\n            this.currentClimaBlockSection.classList.add('clima__temperature--active');\n\n            this.removeLoading();\n\n            this.requestInProgress = false;\n        }\n\n        showLoading() {\n            this.loadingSecton.appendChild(this.loadingElement);\n        }\n\n        removeLoading() {\n            this.loadingSecton.removeChild(this.loadingElement);\n        }\n\n        refreshClima() {\n            this.clearClima();\n\n            this.loadClima();\n        }\n\n        clearClima() {\n            this.currentClimaBlockSection.removeChild(this.currentClimaBlockSection.firstChild);\n            this.currentClimaBlockSection.classList.remove('clima__temperature--active');\n        }\n\n        /**\n         * Returns object containing latitude and longitude\n         */\n        getLocation() {\n            return new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition((position) => resolve(position), (error) => reject(error));\n            });\n        }\n\n        locationFailure(error) {\n            console.log(`ERROR(${err.code}): ${err.message}`);\n            this.requestInProgress = false;\n        }\n\n        determineClimaBlock(temp, units) {\n            let climaBlock = 'js-clima--normal';\n\n            if (units === 'C') {\n                temp = this.convertToFahrenheit(temp);\n            }\n\n            if (temp > 105) {\n                climaBlock = 'js-clima--hot7';\n            } else if (temp > 100 && temp <= 105) {\n                climaBlock = 'js-clima--hot6';\n            } else if (temp > 95 && temp <= 100) {\n                climaBlock = 'js-clima--hot5';\n            } else if (temp > 90 && temp <= 95) {\n                climaBlock = 'js-clima--hot4';\n            } else if (temp > 85 && temp <= 90) {\n                climaBlock = 'js-clima--hot3';\n            } else if (temp > 80 && temp <= 85) {\n                climaBlock = 'js-clima--hot2';\n            } else if (temp > 75 && temp <= 80) {\n                climaBlock = 'js-clima--hot1';\n            } else if (temp >= 70 && temp <= 75) {\n                climaBlock = 'js-clima--normal';\n            } else if (temp >= 65 && temp < 70) {\n                climaBlock = 'js-clima--cold1';\n            } else if (temp >= 60 && temp < 65) {\n                climaBlock = 'js-clima--cold2';\n            } else if (temp >= 55 && temp < 60) {\n                climaBlock = 'js-clima--cold3';\n            } else if (temp >= 50 && temp < 55) {\n                climaBlock = 'js-clima--cold4';\n            } else if (temp >= 45 && temp < 50) {\n                climaBlock = 'js-clima--cold5';\n            } else if (temp >= 40 && temp < 45) {\n                climaBlock = 'js-clima--cold6';\n            } else if (temp < 40) {\n                climaBlock = 'js-clima--cold7';\n            }\n\n            return `#${climaBlock}`;\n        }\n        \n        convertToFahrenheit(C) {\n            return (9/5) * C + 32;\n        }\n    }\n\n    return Weather;\n});","define('datasource/datasource',[\n], function() {\n    'use strict';\n    \n    class Datasource {\n        \n        constructor(options) {}\n\n        /**\n         * Fetch items from datasource.\n         */\n        fetch(obj) {\n            return new Promise((resolve, reject) => {\n\n                let params = obj.params;\n                if (params && typeof params === 'object') {\n                    params = Object.keys(params).map((key) => {\n                        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n                    }).join('&');\n                }\n\n                const url = params ? obj.url + '?' + params : obj.url;\n\n                let xhr = new XMLHttpRequest();\n                xhr.open(obj.method || 'GET', url);\n\n                xhr.onload = () => {\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        resolve(xhr.response);\n                    } else {\n                        reject(xhr.statusText);\n                    }\n                };\n\n                xhr.onerror = () => {\n                    reject(xhr.statusText);\n                };\n\n                // let params = obj.params;\n                // if (params && typeof params === 'object') {\n                //     params = Object.keys(params).map((key) => {\n                //         return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n                //     }).join('&');\n                // }\n                xhr.send();\n            });\n        }\n    }\n\n    return Datasource;\n});","define('datasource/map',[\n    'datasource/datasource'\n], function(\n    Datasource\n) {\n    'use strict';\n\n    const MAPS_URL = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';\n    const MAPS_API_KEY = 'AIzaSyCc-XkOZuw2hSehIeBhuIoUPJ5H0Jss-sE';\n    \n    class Map extends Datasource {\n        \n        constructor(options) {\n            super();\n        }\n\n        getCity(lat, long) {\n            let options = {\n                method: 'GET',\n                url: `${MAPS_URL}${lat},${long}`\n            };\n\n            return this.fetch(options).then((response) => {\n                let jsonResponse = JSON.parse(response);\n                let i;\n                let cityName;\n                const adressComponents = jsonResponse.results[0].address_components\n                const adressComponentsLength = adressComponents.length;\n\n                for (i = 0; i < adressComponentsLength; i += 1) {\n                    const component = adressComponents[i];\n\n                    if (component.types[0] === 'locality') {\n                        cityName = component.short_name;\n                        break;\n                    }\n                }\n\n                return cityName;\n            });\n        }\n    }\n\n    return Map;\n});","define('datasource/weather',[\n    'datasource/datasource'\n], function(\n    Datasource\n) {\n    'use strict';\n\n    const CORS_PROXY = 'https://crossorigin.me/';\n    const URL = 'http://api.openweathermap.org/data/2.5/weather';\n    const API_KEY = 'f1db55c38112d4be78d14107861cb2c8';\n\n    const FORECAST_URL = 'https://api.darksky.net/forecast';\n    const FORECAST_API_KEY = 'd1d02e99b64fd7ba063978ac19af2f04';\n    const FAHRENHEIT = 'F';\n    \n    class Weather extends Datasource {\n\n        constructor(options) {\n            super();\n            this.templates = document.querySelector('#js-templates');\n            this.temperatureTemplate = this.templates.querySelector('#js-templates .clima__item');\n            this.loadingTemplate = this.templates.querySelector('#js-templates .loading__container');\n            \n            this.templates.removeChild(this.loadingTemplate);\n            \n            this.unitSymbol = options.units || 'F';\n            this.units = this.unitSymbol.toUpperCase() === FAHRENHEIT ? 'imperial' : 'metric';\n        }\n\n        getWeather(lat, long) {\n            let options = {\n                method: 'GET',\n                url: `${CORS_PROXY}${URL}?lat=${lat}&lon=${long}&units=${this.units}&APPID=${API_KEY}`\n            };\n\n            return this.fetch(options).then((response) => {\n                let jsonResponse = JSON.parse(response);\n\n                return jsonResponse;\n            });\n        }\n\n        getForecast(lat, long) {\n            let options = {\n                method: 'GET',\n                url: `${FORECAST_URL}/${FORECAST_API_KEY}/${lat},${long}`\n            };\n\n            return new Promise((resolve, reject) => {\n                \n                // Callback function\n                window.callbackJSON = (forecast) => {\n                    // delete callback from global scope\n                    delete window.callbackJSON;\n                    document.body.removeChild(this.dummyScript);\n                    this.dummyScript = null;\n                    \n                    // resolve promise with forecast\n                    resolve(forecast);\n                };\n\n                const callbackName = 'callbackJSON';\n                this.dummyScript = document.createElement('script');\n                this.dummyScript.src = `${options.url}?callback=${callbackName}`;\n                \n                // reject promise on error\n                this.dummyScript.onerror = reject;\n\n                // append dummy script to load JSON\n                document.body.appendChild(this.dummyScript);\n            });\n        }\n\n        /**\n         * Create a loading element, all loading elements are identical\n         */\n        createLoadingElement() {\n            return this.loadingTemplate.cloneNode(true);\n        }\n\n        /**\n         * Render an item, reusing the provided div if provided\n         */\n        render(item, div) {\n            div = div || this.temperatureTemplate.cloneNode(true);\n\n            div.querySelector('.clima__city').textContent = item.city;\n            div.querySelector('.clima__forecast').textContent = `${Math.round(item.temp)}`;\n\n            return div;\n        }\n    }\n\n    return Weather;\n});"]}